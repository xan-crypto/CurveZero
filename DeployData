####################################################################################
# @title Deploy
# @dev used for recording the deploy process and latest contract addyys
# Includes
# - Current testing approach
# - Compile all
# - Deploy all
# - Latest test addys
# - Transaction / call / invoke formats
# - PP data for testing loans
# @author xan-crypto
####################################################################################

# new approach
1) compile all
2) deploy all contracts but TrustedAddy goes last + addys into constructor
3) update all contracts to point to TrustedAddy
4) issue USDC CZT and WETH
5) give USDC CZT and WTH approvals vs czcore
6) create 1 lp
7) create 1 pp
8) create 1 cb
9) test inc / dec collateral on cb
10) test refinance and repay

# compile all
starknet-compile Interface/LiquidityProvider.cairo --output Compiled/LiquidityProvider_compiled.json --abi Compiled/LiquidityProvider_abi.json
starknet-compile Interface/PriceProvider.cairo --output Compiled/PriceProvider_compiled.json --abi Compiled/PriceProvider_abi.json
starknet-compile Interface/CapitalBorrower.cairo --output Compiled/CapitalBorrower_compiled.json --abi Compiled/CapitalBorrower_abi.json
starknet-compile Interface/LoanLiquidator.cairo --output Compiled/LoanLiquidator_compiled.json --abi Compiled/LoanLiquidator_abi.json
starknet-compile Interface/GovenanceToken.cairo --output Compiled/GovenanceToken_compiled.json --abi Compiled/GovenanceToken_abi.json
starknet-compile Core/InsuranceFund.cairo --output Compiled/InsuranceFund_compiled.json --abi Compiled/InsuranceFund_abi.json
starknet-compile Core/CZCore.cairo --output Compiled/CZCore_compiled.json --abi Compiled/CZCore_abi.json
starknet-compile Core/Controller.cairo --output Compiled/Controller_compiled.json --abi Compiled/Controller_abi.json
starknet-compile Config/Settings.cairo --output Compiled/Settings_compiled.json --abi Compiled/Settings_abi.json
starknet-compile Testing/ERC20_base.cairo --output Compiled/ERC20_base_compiled.json --abi Compiled/ERC20_base_abi.json
starknet-compile Testing/Oracle.cairo --output Compiled/Oracle_compiled.json --abi Compiled/Oracle_abi.json
starknet-compile Config/TrustedAddy.cairo --output Compiled/TrustedAddy_compiled.json --abi Compiled/TrustedAddy_abi.json

starknet deploy --contract Compiled/LiquidityProvider_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/PriceProvider_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/CapitalBorrower_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/LoanLiquidator_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/GovenanceToken_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/InsuranceFund_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/CZCore_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/Controller_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/Settings_compiled.json --inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 55534443 55534443 1000000000000000000000000 0 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 4414036 4414036 1000000000000000000000000 0 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/ERC20_base_compiled.json --inputs 57455448 57455448 10000000000000000000000 0 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
starknet deploy --contract Compiled/Oracle_compiled.json --inputs 57455448 57455448
starknet deploy --contract Compiled/TrustedAddy_compiled.json \
--inputs 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd \
    0x04a7fdff7b4181700c8dde5d5701a3e1733ae14175e61c0c91a6578fdc210cbf \
    0x03d8786a53126cfff198acbd1896366987bf44d40ebfd796dce66776b3b93962 \
    0x0371f9edb997861af04ba9c5a6ad2de1fa022cae5696aecd766f105d87150beb \
    0x0518d74b1683491e9369287b7151a3e3c93259cdfc5ce1dff6e520c18b3d95a1 \
    0x025ad05d72de41c75396595451a350e5db8dadf5650baf0b41deb0bd6ebcfb78 \
    0x06968ac970265adefb950dbe0332295e1aebdb0392d6a644d90aa896db43ea3e \
    0x0750ed5b80ddf957e947956a2ef47b99cbb7cf841791ff517e9bb527542cf8b2 \
    0x01fd7f671af10e17b2dc5493f652a82ae3d77868e4644e997050b527626a7aa7 \
    0x049ac49aeb13a9f564a36c3bdc9daaeda94ae16787787c03276bce271b013b51 \
    0x0395e78d7c2495dba9aa9b6f95b3cb23a9fc6a28c27402f155a74737b26091f5 \
    0x05aa983019d7cc294180bbd4c9e1fb954361bd09a054e8b8e9df5776420586f1 \
    0x0642a8136749d9f1d5495e4f02f57fb8e13a01287dd924722ee45362162e5144 \
    0x050c4055afde603ee98470ec2b4f83a76ab849057f92d60b01fb2b89bf54388c

Last test
[owner] = 0x00ac1854ff5696a2e83f10da62666dc27d59dd43262bb2ac5fe531f2e93d7dcd
[lp] = 0x04a7fdff7b4181700c8dde5d5701a3e1733ae14175e61c0c91a6578fdc210cbf
[pp] = 0x03d8786a53126cfff198acbd1896366987bf44d40ebfd796dce66776b3b93962
[cb] = 0x0371f9edb997861af04ba9c5a6ad2de1fa022cae5696aecd766f105d87150beb
[ll] = 0x0518d74b1683491e9369287b7151a3e3c93259cdfc5ce1dff6e520c18b3d95a1
[gt] = 0x025ad05d72de41c75396595451a350e5db8dadf5650baf0b41deb0bd6ebcfb78
[if] = 0x06968ac970265adefb950dbe0332295e1aebdb0392d6a644d90aa896db43ea3e
[czcore] = 0x0750ed5b80ddf957e947956a2ef47b99cbb7cf841791ff517e9bb527542cf8b2
[controller] = 0x01fd7f671af10e17b2dc5493f652a82ae3d77868e4644e997050b527626a7aa7
[setttings] = 0x049ac49aeb13a9f564a36c3bdc9daaeda94ae16787787c03276bce271b013b51
[usdc] = 0x0395e78d7c2495dba9aa9b6f95b3cb23a9fc6a28c27402f155a74737b26091f5
[czt] = 0x05aa983019d7cc294180bbd4c9e1fb954361bd09a054e8b8e9df5776420586f1
[weth] = 0x0642a8136749d9f1d5495e4f02f57fb8e13a01287dd924722ee45362162e5144
[oracle] = 0x050c4055afde603ee98470ec2b4f83a76ab849057f92d60b01fb2b89bf54388c
[trusted] = 0x0181a24d2badd8c18a20ef4e74d993979cd9df8fac5d9d6b9f9a95b544bed260

# check transactions / testing
starknet tx_status --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084
starknet get_transaction_receipt --hash 0x3d4689e0ec1af5cb1c79b9cdf0819400b6635838e9b2ddc5b80b4fda009d084

# call / invoke
starknet call \
    --address 0x059bdbb99a3daa7370a420951d6383ec3857a4b456785dee8e96a1bab1ce46f0 \
    --abi test_abi.json \
    --function check_user_balance \
    --inputs 0x0077113fdcee61d3257d7617d7b01a766a7fcd1dd05e96a91f00e13ea4e77399 \
             0x00fab882affd32569c826ae1df7f00f95013e1da5ded793f5553a62bfbf09cac \
             1152921504606846976000


# CB testing... math lib limitations
12345
100000000000
100000000
165425696298959820

517320185977821066645710419783955797854300374854704929745928561486316208555, 2819868301477575017305248444873021753314081755367429630057371505934600164739, 1168569266187495623930733612466896587645555634574438483193014900819665976824, 3304586175284284706389108604975660264482260261893960117610706245837885648243, 2000000, 1628448741648245036800002906075225705100596136133912895015035902954123957052

# [ signed_loanID_r , signed_loanID_s , signed_rate_r , signed_rate_s , rate , pp_pub , ..... ]

from starkware.crypto.signature.signature import (pedersen_hash, private_to_stark_key, sign)
private_key = 12345
message_hash = pedersen_hash(2000000)
public_key = private_to_stark_key(private_key)
signature = sign(msg_hash=message_hash, priv_key=private_key)
print(f'Public key: {public_key}')
print(f'Signature: {signature}')
